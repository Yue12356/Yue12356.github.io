[{"title":"vocabulary_everyday_05","date":"2019-10-05T00:48:06.000Z","path":"2019/10/vocabulary-everyday-05/","text":"05/10/2019 paraphrasev. 改述，解释，释义n. 改述，解释，释义 triumphn. 成功；胜利；杰出的贡献v. 获胜，成功 triumphant adj. 胜利的，得意洋洋的 forcefullyadv. 强有力地 forceful adj. 有力的；有说服力的 targetv. 把…作为攻击目标；把…对准n. 目标，靶子 on target 切中要害 allegationn. 指控，陈述 allege v. 指控，陈述 perplexv. 迷惑；使困惑 deliberatelyadv. 故意地；蓄意地；小心翼翼地 deliberation n. 考虑，审慎 immunizationn. 免疫接种；免疫 immune adj. 免疫的；免除的 vaccinen. 疫苗 vaccination n. 接种疫苗 epidemicn. 流行病；泛滥，蔓延adj. 流行的，传染性的 deceptiveadj. 欺骗性的；误导的；骗人的 deception n. 欺骗，蒙骗 recruitv. 动员…(提供帮助);吸收(新成员);征募n. 新兵，新成员 uninformedadj. 不了解情况的；知识（或信息）贫乏的；无知的 informed 了解情况的，有学问的 extinguishv. 扑灭，熄灭；毁灭 embern. 灰烬(多用复数形式 embers)；余火未灭的煤块 monopolyn. 垄断；独占；专卖者 monopolist n. 垄断者；专卖者 freightn. 货运；运费；货物 substantialadj. 大量的；重大的；结实的 have … by the throat扼住…的咽喉；抓住…的要害 consolidationn. 合并，巩固；团结 on the grounds that由于 subscribe to同意，支持；订阅 arbiter裁决人，仲裁者 gripn. 控制，理解，紧握v. 紧握 captiveadj. 被监禁的；受控制的 captivity n. 监禁；关押 perchv. 坐落于，位于 to sit on or near the edge of somethinga bird is perching on the branch cliffn. 悬崖，峭壁 photogenicadj. 上镜的，上相的 photo n.照片gene n.基因 well-craftedadj. 精心设计的 craft v. 有技巧地制作 roamv. 漫游，闲逛 roam - travel - visit crazen. 风尚，风靡一时的事物"},{"title":"vocabulary_everyday_04","date":"2019-10-04T13:26:25.000Z","path":"2019/10/vocabulary-everyday-04/","text":"04/10/2019 relatableadj. 能让人有共鸣的 relate v.联系 ubiquitousadj. 无处不在的 ~everywhere in honor of sth.为了庆祝/纪念某事 chronologicaladj.按时间顺序的 chrono- 时间logical adj. 逻辑 ensuev. 接连发生 sth. ensuesHe told a joke. A brief but embarrassing silence ensued. commemoratev. 纪念，缅怀 millineryn. 女帽 bone-headedadj. 傻的，蠢的 bonehead n. 笨蛋 come clean坦白，和盘托出 joltv. 使受到震惊 jolting adj. 令人震惊的 lay the roots for为…打下基础，扎根于 vocationn. 职业 pastimen. 娱乐，消遣(pastimes) spookn. 间谍；鬼v. 惊吓 spooky adj. 吓人的 by a large margin以很大的优势，绝对的优势 make a splash引起轰动，引人注目 splash n.落水声 溅上的液体 mutuallyadv. 相互地；共同地 reinforcev. 加强，充实，加固 vacuumv. 用真空吸尘器清扫（引申为清扫，收集）n. 真空，空虚 earn one`s keep维持生计，生存之道 leanadj. 少量的；瘦的；贫瘠的v. 倾斜；倚 whereby借以，凭借；由于 on the chance (that)有可能，怀着…的希望 back and forthing闪烁其词 remoldv. 改造"},{"title":"vocabulary_everyday_03","date":"2019-10-03T02:58:41.000Z","path":"2019/10/vocabulary-everyday-03/","text":"03/10/2019 stimulatev. 刺激，促使；使兴奋 stimulation n. 兴奋或刺激stimulus n. 刺激物；刺激；激励 inferv. （根据已知事实）推断，断定 infer - imply inference n. 推论 inferioradj. 下级的，下等的；差的，次的n. 晚辈 appropriate fit apt suitable properappropriate指适合某个地位，身份，场合fit是对某一意图，目的或使用是合适的apt指事物自然，合适，恰当suitable暗含符合完成某个意图，需求，强调没有不协调的地方proper含生来就具备适宜性质的含义 approvev. 批准，核准，通过；赞同，同意 ~accept,agree approve of 赞同approving adj. 赞同的prove v. 证明 approval (of) n. 赞成，批准，许可，同意 consciousadj. 神志清醒的，有…意识的；意识到的，自觉的（刻意） conscious - aware conscious强调心理意义上的感觉，aware强调物理上的耳闻目睹，感知unconscious adj. 没意识到的 consciously adv. 有意识地 distortv. 歪曲；（使）失真；曲解 distortion n. 变形，扭曲 exaggerateadj. 夸张的，言过其实的 ~overstate, magnify moderateadj. 温和的，有节制的；适度的，中等的 be in moderate views 持稳健见解a moderate climate predecessorn. 前辈，前任；（被取代的）原有事物 preferableadj. 更可取的，更好的 A is preferable to BIt is preferable that … 从句的谓语动词要使用虚拟语气，即动词原型或should + 动词原型preferably adv. 更好地，更合适地 prescribev. 规定，指定；开处方 prescription n. 计划，建议，秘诀；药方，处方 prestigen. 威望，威信；影响力 prestigious adj. 有威望的，有影响力的 presumablyadv. 推测起来，大概 preyn. 被捕获的动物；（喻）受害者，牺牲品 prey - victimbe/become/fall prey to sth. 被… 捕食 v. 捕食，掠夺，折磨 transientadj. 短暂的，转瞬即逝的；临时的 permanent adj. 永恒的，永久的 consequentlyadv. 因而，所以 disputev. 争论 dispute with/against sb. 与某人争论dispute about 就…争论 dilutev. 稀释，冲淡；削弱，使减色，降低adj. 稀释的，掺水的 dimadj. 暗淡的，模糊的；愚笨的，不乐观的v. 使暗淡，变微弱；使…变弱，失去光泽 take a dim view of 对…持怀疑态度diminish v. 削弱，减少，缩小；贬低，轻视"},{"title":"something_about_hexo_theme_04.md","date":"2019-10-02T11:25:15.000Z","path":"2019/10/something-about-hexo-theme-04-md/","text":"上回模仿着把header写了，但是不好看，今天来写一写css，美化一下header 意料之外的是这个主题的作者使用的stylus写的css样式，那么什么是stylus呢？ stylus这里先贴出一个stylus有关的网页，stylus似乎可以理解为一个css预处理器，我们可以使用更加简洁，更加动态与健壮的语言来写css样式，然后我们写的东西最后都会被compile down to css stylus 具有以下特性 可有可无的冒号，分号，逗号和括号 能定义变量，语法内函数 动态引入 内置函数，父级引用，嵌套选择器 还有非常多的特性我不了解，第一次看到 我原以为会是css文件呢，或者说stylus已经是主流方案了吗？ 我已经头有点大了，看来是非常适合前端的东西。感觉自己要掉进了一个大坑，我先缓一缓，下次再说。"},{"title":"something_about_hexo_theme_03","date":"2019-09-30T14:26:50.000Z","path":"2019/09/something-about-hexo-theme-03/","text":"哎呀，时隔两天，过去的内容都快忘了。上篇博客记录到看header.ejs的部分。那今天就接着继续看吧。 theme headerheader.ejs里有五十行的代码，全部贴到这里不太合适。这里简单介绍一下我的理解。 首先，这个ejs文件很简单的就是要写一个header标签。header标签下的结构大致如下： 1234&lt;header&gt; &lt;div&gt;banner&lt;/div&gt; &lt;div&gt;header-outer&lt;/div&gt;&lt;/header&gt; 其中header-outer里分了header-menu 和header-row两个div。我这里先撇去了css样式不看，我们先看这两个东西是用来干嘛的。 header-menu 可以看出这个header-menu分了三部分，第一部分是一个a标签用来展示theme.header_title的内容。并利用了url_for()获取了网站首页或者说index的路径。现在正好去查一查hexo关于网址的函数 &lt;%- url_for(path) %&gt; 官方解释为 为path路径加上根路径，在hexo2.7版本后都应该使用此函数来代替config.root + path &lt;%- relative_url(from , to) %&gt; 官方解释为 取得与from 相对应的 to路径。之后用到再做理解。 那么现在，第一部分就是一个header_title，点击后返回根路径（大概也就是首页） 第二部分 header-menu-nav 利用for循环 展示了theme.menu中配置的东西。打开theme里的_config.yml文件可以看到这里为menu配置了About,Home,Archive3个内容。这时候就很清楚了，这就是menu啊，难怪取名叫menu，这部分就是header里的菜单选项了。 好的，接下来第三部分 &lt;a class=&quot;mobile-header-menu-button&quot;&gt;&lt;/a&gt; 这可能和手机端有关，先不管了。 header-row 这里也是三个部分，据说一个好的结构，每一层都不应该超过七个点，这里分三个部分确实是结构很清晰。（当然是这里比较简单） 第一个div 用来展示logo 第二个div 用来展示theme.header_title和theme.discription 第三个nav用来展示theme.social配置 模仿既然看了这个header，我觉得有必要模仿着，自己也写一个header试试。 模仿完后的是这样子的 因为没有加css所以看起来不怎么好看，下次就来看看在head.ejs里加的css样式表吧，写一个漂亮的界面能给学习带来正反馈和动力。好吧，今天就先到这吧"},{"title":"vocabulary_everyday_02","date":"2019-09-30T13:49:49.000Z","path":"2019/09/vocabulary-everyday-02/","text":"30/09/2019 frightn. 惊吓 v. 使…受到惊吓 ~frighten portrayv. 刻画，描绘 ~depict portray A as B 把A描绘成B sympathisev. 同情 sympathy n. 同情 sympathise with insomnian. 失眠症 collaboratev. 合作，协作 ~cooperate cutting-edgeadj. 最尖端的，最前沿的。 cutting edge 最前沿，最前端 the land of nod梦乡 nod off 打瞌睡 nod n.v. 点头 draw on / draw upon利用，动用 make use of enough not to足够…而不会 He is smart enough not to ask. put (sb.) off使某人失去兴趣 to make sb. lose interest engaging adj. 令人愉快的，有吸引力的，迷人的"},{"title":"DataStructure_Queue","date":"2019-09-30T02:22:47.000Z","path":"2019/09/DataStructure-Queue/","text":"今天稍微整理一下和队列有关的一些知识点。这里假设已经了解过数据结构的基本概念以及线性表的基本概念。 队列的基本概念（逻辑结构）队列是一种操作受限的线性表。操作受限指的是只能在一端插入，另一端删除（与栈的主要区别）。插入的一端叫做队尾，删除的一端叫做队头。 和日常生活中排队相似，比如食堂打饭，后来的人排在队尾，先来的人就能先排到队头然后从打到饭离开。这种先进先出的特性有个听着高端的名字FIFO (Frist in Frist out)。 这里规范一下叫法，显得更有专业性一些。 删除操作：出队 插入操作：入队 允许插入的一端：队首 允许删除的一端：队尾 不含任何元素的空表：空队列 队列的基本操作这里的命名都是参照参考书，理解即可。 InitQueue(&amp;Q) 初始化队列，构造一个空队列 QueueEmpty(Q) 判断队列是否为空 返回true/false EnQueue(&amp;Q,x) 入队操作，队未满则入队并更新队尾 DeQueue(&amp;Q,&amp;x) 出队操作，队非空则删除队头元素，用x返回 GetHead(Q,&amp;x) 读头元素，队非空则用x返回头元素 队列的存储结构顺序存储12345#definde MaxSize=20typedef struct&#123; ElemType data[MaxSize]; int front,rear;&#125;SqQueue; 通常用front指向队首元素，rear指向队尾元素的下一个位置。(另一种就是front指向队首元素前一个位置，rear指向队尾元素。)(不要太过于纠结具体指向，掌握了就懂了。) 初始条件下，front==rear 表示空队列。 出队操作 队不空时，x=data[front],front++; 入队操作 队不满时，data[rear]=x,rear++; 因为指针或者说下标总是在增加，不管是出队还是入队，因此会造成下标很大，但队列内元素不多，也就是一直逼进MaxSize，最后造成假溢出。 解决这个问题就用到了循环队列。 循环队列循环队列是队列的存储结构，而非逻辑结构，在逻辑结构上，队列依然还是队头，队头，操作受限。只不过在存储上，当下标越界时，我们希望下标回到开头找空的位置。 因此下标前进的操作（也就是队头front，队尾rear前进的操作就不能是简单的+1）改成 front=(front+1)%MaxSize或rear=(rear+1)%MaxSize 循环队列带来一个问题，队列满时,rear下标追上front，导致rear==front，我们怎么区分这是空队列还是满队列呢。 下面有三种方法： 牺牲一个元素的位置，约定当rear下一个位置就是队头时表示满队列，即(rear+1)%MaxSize==front时为满队列，那么空队列就还是原来的rear==front 如果我们不想牺牲一个元素，那我们可以增加一个数据成员size来维护当前队列的元素个数，那么队空就是size==0，队满就是size==MaxSize 还有一种比较麻烦一点的方法就是设置一个tag位，执行出队操作后tag为0，执行入队操作后tag为1，如果因为出队导致rear==front就表示空队列。因为入队导致rear==front就表示队列为满。 链式存储链式存储不存在下标问题，所以不要和循环队列有什么联系，他们就是两种不同的存储结构罢了。 通常情况下，链式存储指的是一个带有队首和队尾指针的单链表。因为在尾指针上不方便删除元素，因此尾指针的一端用来插入元素，正好就是队尾的一端。那么队头的一端就是头指针，用来删除元素。 1234567typedef struct&#123; ElemType data; struct LinkNode * next;&#125;LinkNode;typedef struct&#123; LinkNode *front,*rear;&#125;LinkQueue; 队列为空，则front为nullptr,rear也为nullptr，因此front==rear用来判断队列为空依然适用。链表不存在队列为满的情况（除非自己限制一个MaxSize,那就还需要添加一个数据成员记录队列的元素个数，不然还得遍历链表计算个数），因此入队操作不需要判断队列是否为满 入队，出队的操作记得自己写一写，加深印象。 双端队列双端队列相当于放宽了条件的队列，它允许在两端入队和出队。 这里又分了输出受限双端队列，指的是只有一端能输出的双端队列。输入受限就是只有一端能输入的双端队列。 当我们需要分析通过这样的双端队列能得到的序列时，可以分开讨论，例如讨论只从某一端输入，某一端输出时怎么怎么样。记住，在同一段输入输出的情况，可以看做栈。这会方便我们的思路。 后话多做些联系，加深印象，验证自己的想法是否正确，然后唯手熟尔。 这里没有涉及到队列的应用，也许下次会再讲。"},{"title":"vocabulary_everyday_01","date":"2019-09-29T01:14:09.000Z","path":"2019/09/vocabulary-everyday-01/","text":"29/09/2019 notificationn. 通知 notify v. 通知 alterv. （通常指轻微地）改动，变化 to change slightly or to cause the characteristics of something to change ~change 常指一眼就能看出的改变。 to have my clothes altered.（让衣服更合身） to change my clothes.（换一件衣服） As it turns out, all this distraction may come at a massive costas it turns out 正如它展现的那样，事实证明 at a … cost 以…的代价 at all cost/at any cost 不惜一切代价 sanityn. 心智健全的状态，头脑清醒的状态 a state of having a normal healthy mind sane adj. 头脑清醒的；心智健全的 insane adj. 精神时常的；荒唐的 （by）courtesy of承蒙…的允许；因为，由于 ~（by）permission of the pictures have been reproduced by courtesy of the British Museum. give sb. pause (for thought)使某人认真考虑 to make someone think carefully about something versusperp. 以…为对手；与…相比 literallyadv. 确实地；名副其实地；真的（用于强调所说的话）；字面上地，逐字地；仅仅，只是 We live literally just round the corner from her."},{"title":"something_about_hexo_theme_02","date":"2019-09-28T15:08:45.000Z","path":"2019/09/something-about-hexo-theme-02/","text":"好的，下午好呀。建议想看这个系列博客的读者可以按顺序阅读，才不会摸不着头脑。（事实上，我不想别人来看，这只是我的一个记录博客，自己以后回看用的） 上一篇博客中的每个标题点，我用的都是h2，发现有点大，这篇试试h3。 好的，继续上一篇的内容 hexo partial head上一篇的博客贴出了layout.ejs的代码，第一句就是&lt;%- partial(&#39;_partial/head&#39;) %&gt;，&lt;%-表示输出非转义的数据到模板，很好理解，就是原封不动复制黏贴过来。那我们来看看这个partial函数。 hexo的文档给出如下说明。partial用来载入其他模板文件，可在locals设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt; 参数 描述 默认值 cache 缓存（使用Fragment cache） false only 限制局部变量。即模板中只能使用locals指定的变量 false 嗯。。。 摸不着头脑呀，看完这个说明。嘛，对照一下，layout.ejs文件里第一句的意思应该就是加载_partial文件夹下的head这个layout文件了，果然打开_partial文件夹就看到了head.ejs文档。 ok，为了验证一下是不是这样子，我们修改一下head.ejs里面比较明显的东西。我们在title标签在加上一些标记，看看页面上会不会跟着改变。 果然修改后，每个页面的title都带了个.bigyue。看来我的想法大概是正确的。那我们在来看看Head.ejs 都写了些什么。 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;% var title = page.title; if (is_archive())&#123; title = __('archive_a'); if (is_month())&#123; title += ': ' + page.year + '/' + page.month; &#125; else if (is_year())&#123; title += ': ' + page.year; &#125; &#125; else if (is_category())&#123; title = __('category') + ': ' + page.category; &#125; else if (is_tag())&#123; title = __('tag') + ': ' + page.tag; &#125; %&gt; &lt;title&gt;&lt;% if (title)&#123; %&gt;&lt;%= title %&gt; | &lt;% &#125; %&gt;&lt;%= config.title %&gt;&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"&gt; &lt;% if (theme.keywords)&#123; %&gt; &lt;meta name=\"keywords\" content=\"&lt;%- theme.keywords %&gt;\" /&gt; &lt;% &#125; %&gt; &lt;%- open_graph(&#123;twitter_id: theme.twitter, google_plus: theme.google_plus, fb_admins: theme.fb_admins, fb_app_id: theme.fb_app_id&#125;) %&gt; &lt;% if (theme.rss)&#123; %&gt; &lt;link rel=\"alternate\" href=\"&lt;%- theme.rss %&gt;\" title=\"&lt;%= config.title %&gt;\" type=\"application/atom+xml\"&gt; &lt;% &#125; %&gt; &lt;% if (theme.favicon)&#123; %&gt; &lt;link rel=\"icon\" href=\"&lt;%- theme.favicon %&gt;\"&gt; &lt;% &#125; %&gt; &lt;link href=\"//cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"&gt; &lt;%- css('css/style') %&gt; &lt;%- js('js/pace.min') %&gt; &lt;%- partial('plugins/analytics/google-analytics') %&gt; &lt;%- partial('plugins/analytics/baidu-analytics') %&gt; &lt;%- partial('plugins/analytics/cnzz-analytics') %&gt;&lt;/head&gt; 可以看出这是个写了HTML head的文件。它在head里加了title标签，meta name=&quot;viewport&quot;，和meta name=&quot;keyword&quot;如果theme.keywords有配置的话，还有几个和theme配置相关的link标签，如theme.rss、theme.favicon。再者就是添加css，js文件，使用partial添加几个网站统计工具的模板ejs， 这里暂时不再深入，回过头继续看layout.ejs的body部分怎么写的。 我这里先学习它的写法，创建好ejs文件，并引用，没学习到的ejs文件暂时先写上this is xxx。然后试着执行这样的主题看看。 可以看到局部模板都成功加载了。Head.ejs暂时没有加上中间那句open_graph()看不懂的函数。Head.ejs，也暂时没有加上css和js文件。要用到再看吧。 接下来，再接着看看它写的Header.ejs。今天姑且就这样吧。"},{"title":"someting_about_hexo_theme_01","date":"2019-09-28T13:52:06.000Z","path":"2019/09/someting-about-hexo-theme-01/","text":"something about hexo theme系列的博客用来记录我学习hexo主题的一个过程。 起因是我最近想折腾一下个人博客这个东西，然后我就看到了hexo+github pages+个人域名这样一个打造个人博客的方案。当然，如果可以接受直接使用http://xxx.github.io的话，那也无所谓。当然更加好的方案就是能有自己的一个服务器，毕竟github也不总是能很快响应。但是这些都不是重点。重点是Hexo，一个快速，简洁且高效的博客框架（好像每个框架都会这么讲）。 这里直接贴上hexo中文文档，hexo的安装，基本操作这里就不详细记录了，直接进入正题。 hexo theme我已经了解过使用一个新的主题，只要git clone一个主题到themes/文件夹下，然后修改博客根目录下的_config.yml中的theme值为主题的名字，就能使用。那么创建主题其实也是类似的。 文档中也给出了一个主题一般具有的一个文件结构，只要在themes/下创建一个文件夹作为开发主题的文件夹，名字命名为主题的名字（没有试过中文，避免不必要的错误，建议英文）。 theme file tree123456.├── _config.yml├── languages├── layout├── scripts└── source _config.yml 主题的配置文件 languages 语言文件夹。暂且先不管。 layout 布局文件夹，用来存放主题的模板。Hexo内建Swig模板引擎，可以另外安装插件来获得EJS，Haml或Jade支持。Hexo根据扩展名决定使用的模板引擎。 scripts 脚本文件夹。 source 资源文件夹，除模板外的Asset，如css，javascript文件等。文件或文件夹名称开头为_或隐藏的文件会被忽略。 看完了官方的这么个介绍，确实有了点整体印象，但要如何动手还是一脸懵逼的。比如配置文件怎么写？模板怎么写？都说最好的学习方法就是模仿，那我就直接挑一个好看的主题，git clone 一下，看看别人都是怎么写的。 start learn theme miho随机的挑了一个主题miho，看上去还是挺干净，大气的（个人辣鸡审美）。 看一下它的文件结构 1234567.├── _config.yml├── languages├── layout├── README.md├── source└── _source 和官方相比，没有scripts，还写了个README，先简单看看README都写了些啥吧。README里面写了支持的Hexo版本，以及如何使用、配置这个主题的config和一些参数，写得还是很详细的。 templates突然想起一件重要的事情，官方文档里的模板内容还没看呢。正好现在看看。 有些地方还不是能够看得很懂。但简单先把知道的东西列出来吧。 每个主题至少包含一个index模板(index.ejs)，用来展示主页，其他页面对应的模板有post(文章)，page(分页)，archive(归档)、等等（用到再说） 每个模板默认使用layout布局(layout.ejs)，布局文件中必须有一个显示body变量用来显示模板的内容，否则模板是不会显示的。另外还能通过front-matter指定其他布局，或是设为false关闭布局功能。（暂且没试过，还不知道啥效果） 局部模板（Partial）能使不同模板使用相同的组件，例如页眉，页脚，侧边栏等，便于维护。（这么说应该是非常重要的东西） 局部缓存，用于优化复杂的主题下，频繁查询文件夹，它能储存局部内容，使速度更快。（这大概是最不理解的部分了，不过没关系，现在暂且用不到） 那miho的layout是怎么样的呢 12345678910.├── archive.ejs├── category.ejs├── index.ejs├── layout.ejs├── page.ejs├── _partial├── post.ejs├── tag.ejs└── _widget 确实有一个layout布局，还有index模板，page分页模板，post文章模板，archive归档模板，tag标签归档模板，还有两个文件夹_partial，_widget通过名字猜测大概和局部模板相关？先看看layout吧 123456789101112131415&lt;%- partial('_partial/head') %&gt;&lt;body&gt; &lt;div id=\"container\"&gt; &lt;%- partial('_partial/header', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;div class=\"outer\"&gt; &lt;section id=\"main\" class=\"body-wrap\"&gt;&lt;%- body %&gt;&lt;/section&gt; &lt;% if (theme.sidebar &amp;&amp; theme.sidebar !== 'bottom')&#123; %&gt; &lt;%- partial('_partial/sidebar', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt; &lt;/div&gt; &lt;%- partial('_partial/footer', null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial('_partial/after-footer') %&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 很明显的&lt;% %&gt;指得应该不是html标签，大概是ejs这个东西，这个东西是啥呢。之前官方文档中也有提到。这里贴出ejs介绍，赶紧去看看吧。 这里我们大概知道标签的含义就行了，不清楚的地方，再接着看文档。 &lt;% ‘脚本’ 标签，用于流程控制，无输出。 &lt;%_ 删除其前面的空格符 &lt;%= 输出数据到模板（输出是转义 HTML 标签） &lt;%- 输出非转义的数据到模板 &lt;%# 注释标签，不执行、不输出内容 &lt;%% 输出字符串 ‘&lt;%’ %&gt; 一般结束标签 -%&gt; 删除紧随其后的换行符 _%&gt; 将结束标签后面的空格符删除 现在的时间有点晚了，下次再接着看吧。"}]